package com.bjpowernode.crm.workbench.activity.mapper;

import com.bjpowernode.crm.workbench.activity.pojo.Activity;
import org.apache.ibatis.annotations.Param;

import java.util.List;
import java.util.Map;

public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbg.generated Fri Jun 30 11:33:11 CST 2023
     */
    int deleteByPrimaryKey(String id);



    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbg.generated Fri Jun 30 11:33:11 CST 2023
     */
    int insertSelective(Activity row);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbg.generated Fri Jun 30 11:33:11 CST 2023
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbg.generated Fri Jun 30 11:33:11 CST 2023
     */
    int updateByPrimaryKeySelective(Activity row);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbg.generated Fri Jun 30 11:33:11 CST 2023
     */
    int updateByPrimaryKey(Activity row);

    /**
     * 保存创建的市场活动信息
     * @param activity
     * @return
     */
    int insertActivity(Activity activity);

    /**
     * 根据条件分页查询市场活动的列表
     * @param map
     * @return
     */
    List<Activity> selectActivityByConditionForPage(Map<String,Object> map);

    /**
     * 根据条件查询市场活动表的总记录条数
     * @param map
     * @return
     */
    int selectCountOfActivityByCondition(Map<String,Object> map);

    /**
     * 根据id删除市场活动表信息
     * @param ids
     * @return
     */
    int deleteActivityByIds(@Param("ids") String[] ids);

    /**
     * 根据id查询市场活动表信息
     * @param id
     * @return
     */
    Activity selectActivityById(String id);

    /**
     * 根据id更新市场活动信息
     * @param activity
     * @return
     */
    int updateActivityById(Activity activity);

    /**
     * 查询所有的市场活动
     * @return
     */
    List<Activity> selectAllActivitys();

    /**
     * 根据id数组查询市场活动列表
     * @param ids
     * @return
     */
    List<Activity> selectActivityByIds(@Param("ids") String[] ids);

    /**
     * 根据文件导入，批量创建市场活动
     * @param activities
     * @return
     */
    int insertActivityByFile(@Param("activities") List<Activity> activities);


    /**
     * 通过id给明细页面查询市场活动
     * @param id
     * @return
     */
    Activity selectActivityForDetailById(String id);

    /**
     * 通过线索id查询线索关联的所有市场活动
     * @param clueId
     * @return
     */
    List<Activity> selectActivityForClueDetailByClueId(String clueId);

    /**
     * 根据市场活动名称和线索id模糊查询关联该线索以外的市场活动
     * @param map
     * @return
     */
    List<Activity> selectActivityForClueDetailByNameClueId(Map<String,Object> map);

    /**
     * 根据id数组查询市场活动列表
     * @param ids
     * @return
     */
    List<Activity> selectActivityByActivityIds(@Param("ids") String[] ids);

    /**
     * 根据市场活动名称和clueId模糊查询与该线索关联的市场活动
     * @return
     */
    List<Activity> selectActivityByNameClueId(Map<String,Object> map);

    /**
     * 根据联系人id查询该联系人有关的市场活动
     * @param contactsId
     * @return
     */
    List<Activity> selectActivityForContactsDetailByContactsId(String contactsId);

    /**
     * 根据名称模糊查询不包含该联系人id关联过的市场活动
     * @param map
     * @return
     */
    List<Activity> selectActivityForContactsActivityByName(Map<String,Object> map);

    /**
     * 根据名称模糊查询市场活动
     * @param name
     * @return
     */
    List<Activity> selectActivityByName(String name);

}